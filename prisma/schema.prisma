generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  // isTwoFactorEnabled Boolean @default(false)
  accounts      Account[]
  // twoFactorAuhentication TwoFactorAuthentication?// @relation(fields: [id], references: [userId], onDelete: Cascade) one to one

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

// model PasswordResetToken {
//   id        String   @id @default(cuid())
//   token     String   @unique
//   email     String  
//   expiresAt DateTime
//   @@unique([email, token])
// }

// model TwoFactorToken {
//   id        String   @id @default(cuid())
//   token     String   @unique
//   email    String
//   expiresAt DateTime
//   @@unique([email, token])
// }

// model TwoFactorAuthentication {
//   id        String   @id @default(cuid())
//   userId    String @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)// one to one
// }
